#!/bin/bash

##--------------------------------------------------------------------
## Copyright (c) 2018 Dianomic Systems
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Massimiliano Pinto, Vaibhav Singhal
##

set -e

plugin_type="filter"
plugin_name="fft"
plugin_install_dirname=${plugin_name}
usage="$(basename "$0") [help|clean|cleanall]
This script is used to create the Debian package of FoglAMP C++ '${plugin_name}' ${plugin_type} plugin
Arguments:
 help     - Display this help text
 clean    - Remove all the old versions saved in format .XXXX
 cleanall - Remove all the versions, including the last one"

GIT_ROOT=`pwd`    # The script must be executed from the root git directory
for i in "$@"
do
    case "$i" in
      clean)
          echo -n "Cleaning the build folder from older versions..."
          find "${GIT_ROOT}/packages/build" -maxdepth 1 | grep '.*\.[0-9][0-9][0-9][0-9]' | xargs rm -rf
          echo "Done."
          exit 0
          ;;
      cleanall)
          if [ -d "${GIT_ROOT}/packages/build" ]; then
              echo -n "Cleaning the build folder..."
              rm -rf ${GIT_ROOT}/packages/build/*
              echo "Done."
          else
              echo "No build folder, skipping cleanall"
          fi
          exit 0
          ;;
      help)
          echo "${usage}"
          exit 0
          ;;
      *)
          echo "Unrecognized option: $i"
         exit 1
        ;;
  esac
done

# If the architecture has not been defined, then the script is complete
if [ "$(dpkg --print-architecture)" == "armhf" ]; then
  echo "Building on arm architecture..."
  architecture="armhf"
elif [ "$(dpkg --print-architecture)" == "amd64" ]; then
  echo "Building on amd64 architecture..."
  architecture="x86_64"
elif [ "$(dpkg --print-architecture)" == "arm64" ]; then
  echo "Building on arm64 architecture..."
  architecture="arm64"
else
  echo "The host architecture is not supported for this plugin!!"
  exit 1
fi

# Get plugin version from VERSION
plugin_version=`cat ${GIT_ROOT}/VERSION`
# Get FogLAMP version dependency from foglamp_version file
foglamp_version=`cat ${GIT_ROOT}/foglamp.version | tr -d ' ' | grep 'foglamp_version' | head -1 | sed -e 's/\(.*\)version\(.*\)/\2/g'`
BUILD_ROOT="${GIT_ROOT}/packages/build"

# Final package name
package_name="foglamp-${plugin_type}-${plugin_name}-${plugin_version}-${architecture}"

# Print the summary of findings
echo "The package root directory is   : ${GIT_ROOT}"
echo "The FogLAMP required version    : ${foglamp_version}"
echo "The package will be built in    : ${BUILD_ROOT}"
echo "The architecture is set as      : ${architecture}"
echo "The package name is             : ${package_name}"
echo

# Create the package directory. If a directory with the same name exists,
# it is copied with a version number.

# First, create the BUILD_ROOT folder, if necessary
if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
    mkdir -p "${BUILD_ROOT}"
fi

# Check if the default directory exists
if [[ ! -d "${FOGLAMP_ROOT}" ]]; then
    logger -p local0.err -t "foglamp.script.foglamp" "FogLAMP cannot be executed: ${FOGLAMP_ROOT} is not a valid directory."
    echo "FogLAMP cannot be executed: ${FOGLAMP_ROOT} is not a valid directory."
    echo "Create the enviroment variable FOGLAMP_ROOT before using FogLAMP."
    echo "Specify the base directory for FogLAMP and set the variable with:"
    echo "export FOGLAMP_ROOT=<basedir>"
    exit 1
fi

# Check/set LD_LIBRARY_PATH
libPathSet=0
libdir=${FOGLAMP_ROOT}/lib; [ -d ${libdir} ] && LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s|${libdir}||g") && export LD_LIBRARY_PATH=${libdir}:${LD_LIBRARY_PATH} && libPathSet=1
libdir=${FOGLAMP_ROOT}/cmake_build/C/lib; [ -d ${libdir} ] && LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s|${libdir}||g") && export LD_LIBRARY_PATH=${libdir}:${LD_LIBRARY_PATH} && libPathSet=1
[ "$libPathSet" -eq "0" ] && echo "Unable to set/update LD_LIBRARY_PATH to include path of Foglamp shared libraries: check whether ${FOGLAMP_ROOT}/lib or ${FOGLAMP_ROOT}/cmake_build/C/lib exists" && exit 1

rm -rf build; mkdir ./build; cd ./build; cmake ..; make; cd ..

cd "${BUILD_ROOT}"
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.%04d" "${existing_pkgs}")
if [ -d "${package_name}" ]; then
    echo "Saving the old working environment as ${new_stored_pkg}"
    mv "${package_name}" "${new_stored_pkg}"
fi
mkdir "${package_name}"

# Populate the package directory with Debian files
# First with files common to all pla
echo -n "Populating the package and updating version file..."
cd "${package_name}"
cp -R ${GIT_ROOT}/packages/Debian/common/* .
cp -R ${GIT_ROOT}/packages/Debian/${architecture}/* .
sed -i "s/Version: 1.0.0/Version: ${plugin_version}/g" DEBIAN/control
sed -i "s/Depends: foglamp/Depends: foglamp (${foglamp_version})/g" DEBIAN/control

mkdir -p usr/local/foglamp
cd usr/local/foglamp
mkdir -p "plugins/${plugin_type}/${plugin_install_dirname}"
cp -R --preserve=links ${GIT_ROOT}/build/lib*.so* "plugins/${plugin_type}/${plugin_install_dirname}"
echo "Done."

# Build the package
cd "${BUILD_ROOT}"

# Save the old versions
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.deb.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.deb.%04d" "${existing_pkgs}")

if [ -e "${package_name}.deb" ]; then
    echo "Saving the old package as ${new_stored_pkg}"
    mv "${package_name}.deb" "${new_stored_pkg}"
fi

echo "Building the new package..."
dpkg-deb --build ${package_name}
echo "Building Complete."

exit 0
